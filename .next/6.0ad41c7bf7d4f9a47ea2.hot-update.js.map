{"version":3,"file":"6.0ad41c7bf7d4f9a47ea2.hot-update.js","sources":["webpack:///pages/post.js"],"sourcesContent":["import React, { Fragment } from 'react'\nimport BlockContent from '@sanity/block-content-to-react'\nimport imageUrlBuilder from '@sanity/image-url'\nimport Link from 'next/link'\nimport { format } from 'date-fns'\nimport client from '../client'\nimport Layout from '../components/Layout';\nimport Navbar from '../components/Navbar';\nimport stylesheet from '../styles/about.scss';\n\nconst builder = imageUrlBuilder(client)\nfunction urlFor(source) {\n  return builder.image(source)\n}\n\nconst serializers = {\n  types: {\n    image: ({ node: { asset } }) => (\n      <picture>\n        <img\n          style={{ width: \"100%\" }}\n          srcSet={`\n            ${urlFor(asset).width(320)} 320w,\n            ${urlFor(asset).width(480)} 480w,\n            ${urlFor(asset).width(800)} 800w\n          `}\n          sizes={`\n            (max-width: 320px) 280px,\n            (max-width: 480px) 440px,\n            800px\n          `}\n          src={urlFor(asset)}\n        />\n      </picture>\n    )\n  }\n};\n\nconst CommaJoiner = ({ list = [], conjuction = 'and', separator = ',' }) => <Fragment>{list.map((item, index) => <span key={item}>{item}{\n  (list.length === 1) ? '.' :\n  (index + 2 === list.length) ? ` ${conjuction} ` :\n  (index + 1 === list.length) ? '.' : `${separator} `\n  }\n  </span>)\n}</Fragment>\n\nconst BlogPost = ({ title = 'No title', name = 'No name', publishedAt='', categories = [], authorImage = {}, body = [], _updatedAt = '' }) => (\n  <Layout  title={title}> \n   <style dangerouslySetInnerHTML={{ __html: stylesheet }} />\n   <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t  <div id=\"panel\"  data-slideout-ignore>\n\t\t  <section className=\"pricing\">\n\t\t  <Navbar />\n\t\t\t<div className=\"content\">\n\t\t\t  <div className=\"row\">\n\t\t\t\t<div className=\"pricing-text-wrapper\">\n\t\t\t\t  <div className=\"text-content\">\n  \n  <div className=\"post-content\">\n  <div><img src={urlFor(authorImage).width(50).url()} /></div>\n  <h1>{title}</h1>\n  <i className=\"fa fa-pencil\"></i> Written by <span>{name}</span> in <span>{categories.length &&  <CommaJoiner list={categories} />}</span> on {format(publishedAt, 'MMMM DD, YYYY')}\n  <div className=\"resp\"><BlockContent\n    serializers={serializers}\n    blocks={body}\n    imageOptions={{w: 660, h: 435, fit: 'min'}}\n    projectId={client.clientConfig.projectId}\n    dataset={client.clientConfig.dataset}\n  /></div>\n  <i className=\"fa fa-arrow-left\"></i><Link href=\"/blog\"><a>Back to Blog</a></Link>\n  </div>\n\n\n</div></div>\n\t\t\t\t</div>\n          </div>\n      </section>\n    </div>\n\t\n\t<style jsx>{`\n\t.text-content{\n\t\t  text-align:center;\n\t  }\n\t  \n      .text-content span{\n\t\t  font-weight: 600;\n\t\t  color: #B721FF;\n\t\t  font-style:normal;\n\t  }\n\t  .post-content img{\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n\tmax-width: 100%;\n    height: auto;\n\t  }\n\t  .post-content i{\n    color:#1EAEDB;\n\t  }\n\t  .resp{\n  max-width: 740px;\n  width:100%;\n    height: auto;\n\tdisplay:block;\n\ttext-align:justify;\n\tmargin-left:auto;\n  margin-right:auto;\n  margin-top:20px;\n    }\n\t  \n    `}</style>\n\t\n\t\n</Layout>\n)\n\nBlogPost.getInitialProps = async (req) => {\n  return await client.fetch(`*[slug.current == $slug][0]{\n      title,\n      \"name\": author->name,\n      \"categories\": categories[]->title,\n      \"authorImage\": author->image,\n\t  publishedAt,\n      body,\n      _updatedAt\n    }`, {slug: req.query.slug})\n}\n\nexport default BlogPost\n\n\n// WEBPACK FOOTER //\n// pages/post.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAKA;AAKA;AAZA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AADA;AACA;AAstBA;AAAA;AAAA;AADA;AACA;AAqEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AACA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;;;;;;;;;;;;AAtHA;AACA;AAIA;AAuBA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}